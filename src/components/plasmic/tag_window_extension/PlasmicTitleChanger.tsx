// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h8pdmdKq58xaRhHHLoUNc6
// Component: qvj9LAuDos
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: NXlQXFGC2vW/component
import Button from "../../Button"; // plasmic-import: exGK7pxvP83/component
import Switch from "../../Switch"; // plasmic-import: bPAJdAquPC7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_tag_window_extension.module.css"; // plasmic-import: h8pdmdKq58xaRhHHLoUNc6/projectcss
import sty from "./PlasmicTitleChanger.module.css"; // plasmic-import: qvj9LAuDos/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: LvHcsk4gs9D/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: HvUfUv_Shlg/icon
import Info24FilledIcon from "./icons/PlasmicIcon__Info24Filled"; // plasmic-import: _Z7KNj0GT4/icon

export type PlasmicTitleChanger__VariantMembers = {};

export type PlasmicTitleChanger__VariantsArgs = {};
type VariantPropType = keyof PlasmicTitleChanger__VariantsArgs;
export const PlasmicTitleChanger__VariantProps = new Array<VariantPropType>();

export type PlasmicTitleChanger__ArgsType = {};
type ArgPropType = keyof PlasmicTitleChanger__ArgsType;
export const PlasmicTitleChanger__ArgProps = new Array<ArgPropType>();

export type PlasmicTitleChanger__OverridesType = {
  root?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  button?: p.Flex<typeof Button>;
  infoIconWrapper?: p.Flex<"div">;
  infoIcon?: p.Flex<"svg">;
  autoTaggingSwitch?: p.Flex<typeof Switch>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultTitleChangerProps {
  className?: string;
}

function PlasmicTitleChanger__RenderFunc(props: {
  variants: PlasmicTitleChanger__VariantsArgs;
  args: PlasmicTitleChanger__ArgsType;
  overrides: PlasmicTitleChanger__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__a845K)}
        >
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
          />

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fjTfo
              )}
            >
              {"↩︎"}
            </div>
          </Button>
        </p.Stack>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xVqKp)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wYz1H
              )}
            >
              {"to make it easier to spot this window"}
            </div>

            {true ? (
              <div
                data-plasmic-name={"infoIconWrapper"}
                data-plasmic-override={overrides.infoIconWrapper}
                className={classNames(projectcss.all, sty.infoIconWrapper)}
              >
                <Info24FilledIcon
                  data-plasmic-name={"infoIcon"}
                  data-plasmic-override={overrides.infoIcon}
                  className={classNames(projectcss.all, sty.infoIcon)}
                  role={"img"}
                />
              </div>
            ) : null}
          </p.Stack>
        ) : null}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jat6B
          )}
        >
          {"------------------\n"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mVVy
          )}
        >
          {
            "By default, every window gets a unique emoji tag. This happens automatically unless turned off. "
          }
        </div>

        <Switch
          data-plasmic-name={"autoTaggingSwitch"}
          data-plasmic-override={overrides.autoTaggingSwitch}
          className={classNames("__wab_instance", sty.autoTaggingSwitch)}
          defaultChecked={true}
        >
          {null}
        </Switch>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "textInput",
    "textbox",
    "button",
    "infoIconWrapper",
    "infoIcon",
    "autoTaggingSwitch"
  ],
  textInput: ["textInput", "textbox"],
  button: ["button"],
  infoIconWrapper: ["infoIconWrapper", "infoIcon"],
  infoIcon: ["infoIcon"],
  autoTaggingSwitch: ["autoTaggingSwitch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  button: typeof Button;
  infoIconWrapper: "div";
  infoIcon: "svg";
  autoTaggingSwitch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTitleChanger__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTitleChanger__VariantsArgs;
    args?: PlasmicTitleChanger__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTitleChanger__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTitleChanger__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTitleChanger__ArgProps,
      internalVariantPropNames: PlasmicTitleChanger__VariantProps
    });

    return PlasmicTitleChanger__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTitleChanger";
  } else {
    func.displayName = `PlasmicTitleChanger.${nodeName}`;
  }
  return func;
}

export const PlasmicTitleChanger = Object.assign(
  // Top-level PlasmicTitleChanger renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    infoIconWrapper: makeNodeComponent("infoIconWrapper"),
    infoIcon: makeNodeComponent("infoIcon"),
    autoTaggingSwitch: makeNodeComponent("autoTaggingSwitch"),

    // Metadata about props expected for PlasmicTitleChanger
    internalVariantProps: PlasmicTitleChanger__VariantProps,
    internalArgProps: PlasmicTitleChanger__ArgProps
  }
);

export default PlasmicTitleChanger;
/* prettier-ignore-end */
